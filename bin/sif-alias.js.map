{"version":3,"sources":["sif-alias.es6"],"names":[],"mappings":"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","file":"sif-alias.js","sourcesContent":["#!/usr/bin/env node\n\n'use strict';\n\n/*    _,                            ,--.   ,---.\n *   /(_                     ,---.  `--'  /  .-'\n *  |   '-._        . ' .   (  .-'  ,--.  |  `-,\n *  \\    ,-.)      -= * =- .-'  `)  |  |  |  .-'\n *   \\((` .(        '/. '  `----'   `--'  `--'\n *    )\\  _/        /         just like magic\n * .-'   '--.      /\n * \\,         \\   /|\n *  ';,_) _)'\\ \\,//    This program is distributed\n *   `\\   (   '._/   under the terms of the MIT license.\n *    |  . '.\n *    |      \\   Please see the `LICENSE.md` file for details.\n *    |  \\|   |\n *     \\  |  /    Send your comments and suggestions to…\n *      '.| /      <https://github.com/v0lkan/sif/issues>.\n */\n\nimport program from 'commander';\nimport byline from 'byline';\n\nimport { join } from 'path';\nimport { spawn } from 'child_process';\nimport { createReadStream as read, createWriteStream as write } from 'fs';\n\nimport { printError as error, print } from '../lib/terminal/out';\n\nimport { ALIASES_FILE, ALIASES_TMP_FILE } from '../lib/config/files';\nimport { ALIAS_DELIMITER } from '../lib/config/constants';\n\nprogram\n    .usage('<shorthand> <query>')\n    .parse( process.argv );\n\nconst COMMAND = 'alias';\n\nlet args = program.args;\n\nlet fsOptions = { encoding: 'utf8' };\n\nif (args.length < 2) {\n    error(\n        COMMAND,\n        'Invalid arguments. — Usage: \"sif alias <shorthand> <query>\".'\n    );\n\n    process.exit( 1 );\n}\n\nlet shorthand = args[ 0 ];\nlet query = args[ 1 ];\n\nlet tempStream = write( ALIASES_TMP_FILE, fsOptions );\n\n{\n    tempStream.on('finish', () => {\n        let sort = spawn( 'sort', [ '-u', ALIASES_TMP_FILE ] );\n        let sortedLines = byline( sort.stdout );\n        let aliasWriteStream = write( ALIASES_FILE, fsOptions );\n\n        sortedLines.on( 'data', line => aliasWriteStream.write( `${line}\\n` ) );\n\n        aliasWriteStream.on( 'finish', () => print( COMMAND, 'Done!' ) );\n\n        sortedLines.on( 'end', () => { aliasWriteStream.end(); } );\n\n        return;\n    } );\n}\n\n{\n    let cat = spawn( 'cat', [ ALIASES_FILE ] );\n    let lines = byline( cat.stdout );\n\n    let processed = false;\n\n    lines.on( 'data', ( line ) => {\n        let currentLine = line.toString();\n        let parts = currentLine.split( ALIAS_DELIMITER );\n\n        if ( !parts.length ) { return; }\n\n        // TODO: adding a line to a file based on a predicate is a common task; make it a module.\n        let alias = parts[ 0 ];\n        let command = parts[ 1 ];\n\n        if ( alias === shorthand.trim() ) {\n            tempStream.write( `${alias}${ALIAS_DELIMITER}${query.trim()}\\n` );\n            processed = true;\n\n            return;\n        }\n\n        tempStream.write( `${alias}=${command}\\n` );\n    });\n\n    lines.on('end', () => {\n        if ( processed ) {\n            tempStream.end();\n\n            return;\n        }\n\n        tempStream.end( `${shorthand}${ALIAS_DELIMITER}${query}\\n` );\n    } );\n}\n"]}