{"version":3,"sources":["sif-tag.es6"],"names":[],"mappings":"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","file":"sif-tag.js","sourcesContent":["#!/usr/bin/env node\n\n'use strict';\n\n/*    _,                            ,--.   ,---.\n *   /(_                     ,---.  `--'  /  .-'\n *  |   '-._        . ' .   (  .-'  ,--.  |  `-,\n *  \\    ,-.)      -= * =- .-'  `)  |  |  |  .-'\n *   \\((` .(        '/. '  `----'   `--'  `--'\n *    )\\  _/        /         just like magic\n * .-'   '--.      /\n * \\,         \\   /|\n *  ';,_) _)'\\ \\,//    This program is distributed\n *   `\\   (   '._/   under the terms of the MIT license.\n *    |  . '.\n *    |      \\   Please see the `LICENSE.md` file for details.\n *    |  \\|   |\n *     \\  |  /    Send your comments and suggestions toâ€¦\n *      '.| /      <https://github.com/v0lkan/sif/issues>.\n */\n\nimport program from 'commander';\nimport { createWriteStream as write, createReadStream as read } from 'fs';\nimport { spawn } from 'child_process';\nimport { print, error } from '../lib/terminal/out';\nimport { find } from '../lib/query';\nimport {\n    INDEX_FILE,\n    PROCESS_TMP_EXISTING_FILE,\n    PROCESS_TMP_PROCESSED_FILE\n} from '../lib/config/files';\nimport {\n    MATCH_DELIMITER,\n    MATCH_TAGS_DELIMITER,\n    MATCH_TAG_DELIMITER\n} from '../lib/config/regexp';\nimport {\n    DELIMITER,\n    TAGS_DELIMITER,\n    TAG_DELIMITER\n} from '../lib/config/constants';\n\nprogram.parse( process.argv );\n\nconst COMMAND = 'tag';\n\nlet fsOptions = { encoding: 'utf8' };\nlet fsAppendOptions = { encoding: 'utf8', flags: 'a' };\n\nif ( program.args.length === 0 ) {\n    error(COMMAND, 'Usage: sif tag [searchExpression] [tagName]')\n    exit(1);\n}\n\nlet query = program.args[0];\nlet tags = program.args.splice(1);\n\n// Perform an inverted search with query, save it to a temp file.\nlet tempStream = write( PROCESS_TMP_EXISTING_FILE, fsOptions );\n\ntempStream.on( 'finish', () => {\n    let tempStream = write( PROCESS_TMP_EXISTING_FILE, fsAppendOptions );\n\n    tempStream.on( 'finish', () => {\n        spawn( 'cp', [ INDEX_FILE, INDEX_FILE + '.backup' ] )\n            .stdout.on( 'end', () => {\n                spawn( 'sort', [ '-u', PROCESS_TMP_EXISTING_FILE ] )\n                    .stdout.pipe( write( INDEX_FILE, fsOptions ) )\n                    .on( 'finish', () => print( COMMAND, 'Done.' ) );\n            } );\n    } );\n\n    find( query, false, ( line ) => {\n        let parts = line.split( MATCH_DELIMITER );\n        let url = parts[ 0 ];\n        let meta = parts[ 1 ];\n\n        if ( meta ) {\n            let metaParts = meta.split( MATCH_TAGS_DELIMITER );\n            let description = metaParts[ 0 ];\n            let metaTags = metaParts[ 1 ];\n\n            let mergedTags = [];\n\n            // TODO: to some util module.\n            let uniq = ( el, i, ar ) => ar.indexOf( el ) === i;\n            let notEmpty = what => '' + what !== '';\n            let trim = tag => tag.trim();\n\n            let tagLiteral = ( metaTags || '' )\n                .split( MATCH_TAG_DELIMITER )\n                // TODO: for remove case \"exclude\" instead of \"concat\".\n                .concat( tags )\n                .filter( notEmpty )\n                .map( trim )\n                .filter( uniq )\n                .sort()\n                .join( TAG_DELIMITER );\n\n            tempStream.write( `${url} ${DELIMITER} ${description} ${TAGS_DELIMITER} ${tagLiteral}\\n` );\n        } else {\n            MATCH_TAGS_DELIMITER.test( line ) ?\n                tempStream.write( `${line}\\n` ) :\n                tempStream.write( `${line} ${TAGS_DELIMITER}\\n` );\n        }\n    }, () => {\n        tempStream.end();\n    } );\n} );\n\nfind( query, true, ( line ) => {\n    tempStream.write( `${line}\\n` );\n}, () => {\n   tempStream.end();\n} );\n\n// rmtag will work similarly, and instead of adding into the array it will\n// remove from the array.\n\n"]}