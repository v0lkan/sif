{"version":3,"sources":["sif-update.es6"],"names":[],"mappings":"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","file":"sif-update.js","sourcesContent":["#!/usr/bin/env node\n\n'use strict';\n\n/*    _,                            ,--.   ,---.\n *   /(_                     ,---.  `--'  /  .-'\n *  |   '-._        . ' .   (  .-'  ,--.  |  `-,\n *  \\    ,-.)      -= * =- .-'  `)  |  |  |  .-'\n *   \\((` .(        '/. '  `----'   `--'  `--'\n *    )\\  _/        /         just like magic\n * .-'   '--.      /\n * \\,         \\   /|\n *  ';,_) _)'\\ \\,//    This program is distributed\n *   `\\   (   '._/   under the terms of the MIT license.\n *    |  . '.\n *    |      \\   Please see the `LICENSE.md` file for details.\n *    |  \\|   |\n *     \\  |  /    Send your comments and suggestions to…\n *      '.| /      <https://github.com/v0lkan/sif/issues>.\n */\n\nimport program from 'commander';\nimport byline from 'byline';\nimport request from 'request';\nimport {join} from 'path';\nimport {spawn} from 'child_process';\nimport {createReadStream as read, createWriteStream as write} from 'fs';\n\nimport {printHeader as header, print, printBlank as blank, printError as error} from '../lib/terminal/out';\n\nconst COMMAND = 'update';\nconst SUCCESS = 200;\nconst INDEX_FILE = join(__dirname, '../data/index.idx');\nconst TMP_EXISTING_FILE = join(__dirname, '__tmp_processed');\nconst TMP_PROCESSED_FILE = join(__dirname, '__tmp_existing');\n\nprogram.parse(process.argv);\n\n// TODO: this file needs some cleanup.\n\n// TODO: it is possible that writeStream.write may return `false`; in that case we should wait for the flush event.\n\n// TODO: jshint -- does it matter anymore in es6?! -- maybe a blog post topic.\n// @see http://eslint.org/docs/user-guide/command-line-interface\n\n// TODO: integrate complexity analysis too.\n\n// TODO: add a progressbar.\nprint(COMMAND, 'Started updating the index… This may take a while. Please be patient…');\n\nlet backup = spawn('cp', [INDEX_FILE, INDEX_FILE + '.backup']);\n\nbackup.stdout.on('end', () => {\n    let inStream = byline(read(INDEX_FILE, {encoding: 'utf8'}));\n\n    let tmpExistingFileWriteStream = write(TMP_EXISTING_FILE, {encoding: 'utf8'});\n    let tmpProcessedFileWriteStream = write(TMP_PROCESSED_FILE, {encoding: 'utf8'});\n\n    // can be done with promises too.\n    let remainingMetaDataRequests = 0;\n    let inStreamEnded = false;\n\n    let maybeEndProcessedFileWriteStream = null;\n\n    maybeEndProcessedFileWriteStream = () => {\n        if (inStreamEnded && remainingMetaDataRequests === 0) {\n            let counter = 2;\n\n            let copyAssets = () => {\n                let cat = spawn('cat', [TMP_EXISTING_FILE, TMP_PROCESSED_FILE]);\n                let sort = spawn('sort', ['-u']);\n\n                let indexWriteStream = write(INDEX_FILE, {encoding: 'utf8'});\n\n                cat.stdout.on('data', (line) => {\n                    sort.stdin.write(line);\n                });\n\n                // rs | ws\n                sort.stdout.pipe(indexWriteStream);\n\n                sort.stdout.on('end', () => {\n                    print(COMMAND, 'Done!');\n\n                    indexWriteStream.end();\n                });\n\n                cat.stdout.on('end', () => {\n                    sort.stdin.end();\n                });\n            };\n\n            let maybeCopyAssets = null;\n\n            maybeCopyAssets = () => {\n                counter--;\n\n                if (counter === 0) {\n                    copyAssets();\n                }\n\n                maybeCopyAssets = () => {};\n            };\n\n            tmpProcessedFileWriteStream.on('finish', maybeCopyAssets);\n            tmpExistingFileWriteStream.on('finish', maybeCopyAssets);\n\n            tmpProcessedFileWriteStream.end();\n            tmpExistingFileWriteStream.end();\n\n            maybeEndProcessedFileWriteStream = () => {};\n        }\n    };\n\n    inStream.on('data', (line) => {\n\n        // TODO: to a util library function.\n        let occurrences = line.split('<::sif::>').length - 1;\n        let needsProcessing = occurrences === 0;\n        let alreadyProcessed = occurrences === 1;\n        let malformed = !needsProcessing && !alreadyProcessed;\n\n        if (malformed) {\n            error(COMMAND, `badly-formatted line: \"${line.replace(/sif/g, '__sif__')}\"`);\n\n            return;\n        }\n\n        if (needsProcessing) {\n            remainingMetaDataRequests++;\n\n            let url = line.trim();\n\n            request(url, (error, response, body) => {\n                remainingMetaDataRequests--;\n\n                if (error || response.statusCode !== SUCCESS) {\n                    maybeEndProcessedFileWriteStream();\n\n                    return;\n                }\n\n                let replaced = body.replace(/\\s+/g, ' ');\n                let result = /<title>(.*?)<\\/title>/i.exec(replaced);\n                let title = result[1];\n\n                if (title) {\n                    tmpProcessedFileWriteStream.write(url + ' <::sif::> ' + title + '\\n');\n                } else {\n                    error(COMMAND, `no title found for: \"${url}\"; I'll leave it untouched. — Please file a bug at xxx to get it fixed.`);\n\n                    tmpExistingFileWriteStream.write(url + '\\n');\n                }\n\n                maybeEndProcessedFileWriteStream();\n            });\n\n            return;\n        }\n\n        tmpExistingFileWriteStream.write(line.trim() + '\\n');\n    });\n\n    inStream.on('end', () => {\n        inStreamEnded = true;\n\n        // on `end`, all the data is consumed.\n        maybeEndProcessedFileWriteStream();\n    });\n});\n"]}