{"version":3,"sources":["index.es6"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;sBAmBM,QAAQ;;;;kBAEc,IAAI;;6BACvB,eAAe;;wBACb,UAAU;;2BAI3B,iBAAiB;;+BAIjB,qBAAqB;;AAE5B,IAAI,SAAS,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;;AAErC,IAAI,mBAAmB,GAAG,SAAtB,mBAAmB,CAAK,OAAO,EAAM;AACrC,QAAK,OAAO,CAAE,CAAC,CAAE,sBAPjB,YAAY,AAOsB,EAAG;AACjC,eAAO,UAdN,OAAO,CAcO,OAAO,CAAE,OAAO,CAAE,CAAC;KACrC;;AAED,WAAO,cAjBF,OAAO,CAiBQ,UAAE,OAAO,EAAE,MAAM,EAAM;AACvC,aAAK,MAAM,CAAC;;AAEZ,YAAI,MAAM,GAAG,OAAO,CAAC,SAAS,CAAE,CAAC,CAAE,CAAC;AACpC,YAAI,KAAK,GAAG,yBAAQ,QAvBnB,gBAAgB,eAIrB,YAAY,EAmBgC,SAAS,CAAE,CAAE,CAAC;;AAEtD,aAAK,CAAC,EAAE,CAAE,MAAM,EAAE,UAAE,IAAI,EAAM;AAC1B,gBAAI,MAAM,GAAG,IAAI,CAAC,KAAK,kBAjB/B,eAAe,CAiBmC,CAAC;AAC3C,gBAAI,KAAK,GAAG,MAAM,CAAE,CAAC,CAAE,CAAC;AACxB,gBAAI,KAAK,GAAG,MAAM,CAAE,CAAC,CAAE,CAAC;;AAExB,gBAAK,MAAM,KAAK,KAAK,EAAG;AAAE,uBAAO,CAAE,KAAK,CAAE,CAAC;aAAE;SAChD,CAAC,CAAC;;AAEH,aAAK,CAAC,EAAE,CAAE,KAAK,EAAE;mBAAM,OAAO,CAAE,OAAO,CAAE;SAAA,CAAE,CAAC;KAC/C,CAAE,CAAC;CACP,CAAC;;AAEF,IAAI,cAAc,GAAG,SAAjB,cAAc,CAAK,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAM;AAC/D,QAAI,YAAY,GAAG,CAAE,IAAI,CAAE,CAAC;;AAE5B,QAAK,QAAQ,EAAG;AACZ,oBAAY,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;KAC7B;;AAED,gBAAY,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;;AAE3B,QAAI,KAAK,GAAG,mBA7CP,KAAK,EA6CS,KAAK,EAAE,cAzC1B,UAAU,CAyC8B,CAAE,CAAC;AAC3C,QAAI,MAAM,GAAG,mBA9CR,KAAK,EA8CU,OAAO,EAAE,YAAY,CAAE,CAAC;;AAE5C,QAAI,KAAK,GAAG,YAlDP,YAAY,GAkDa,CAAC;;AAE/B,SAAK,CAAC,MAAM,CAAC,IAAI,CAAE,MAAM,CAAC,KAAK,CAAE,CAAC;AAClC,UAAM,CAAC,MAAM,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;;AAE5B,SAAK,CAAC,EAAE,CAAE,MAAM,EAAE,UAAE,IAAI;eAAM,UAAU,CAAE,IAAI,CAAC,QAAQ,EAAE,CAAE;KAAA,CAAE,CAAC;AAC9D,SAAK,CAAC,EAAE,CAAC,KAAK,EAAE;eAAM,SAAS,EAAE;KAAA,CAAE,CAAC;;AAEpC,SAAK,CAAC,MAAM,CAAC,EAAE,CAAE,KAAK,EAAE,YAAM;;;AAG1B,cAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;KACtB,CAAE,CAAC;CACP,CAAC;;AAEF,IAAI,IAAI,GAAG,SAAP,IAAI,CAAK,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAM;AACrD,uBAAmB,CAAE,KAAK,CAAE,CAAC,IAAI,CAC7B,UAAE,KAAK;eAAM,cAAc,CAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,CAAE;KAAA,CACxE,CAAC;CACL,CAAC;;QAEO,IAAI,GAAJ,IAAI","file":"index.js","sourcesContent":["'use strict';\n\n/*    _,                            ,--.   ,---.\n *   /(_                     ,---.  `--'  /  .-'\n *  |   '-._        . ' .   (  .-'  ,--.  |  `-,\n *  \\    ,-.)      -= * =- .-'  `)  |  |  |  .-'\n *   \\((` .(        '/. '  `----'   `--'  `--'\n *    )\\  _/        /         just like magic\n * .-'   '--.      /\n * \\,         \\   /|\n *  ';,_) _)'\\ \\,//    This program is distributed\n *   `\\   (   '._/   under the terms of the MIT license.\n *    |  . '.\n *    |      \\   Please see the `LICENSE.md` file for details.\n *    |  \\|   |\n *     \\  |  /    Send your comments and suggestions toâ€¦\n *      '.| /      <https://github.com/v0lkan/sif/issues>.\n */\n\nimport byline from 'byline';\nimport { createStream as createLineStream } from 'byline';\nimport { createReadStream as read } from 'fs';\nimport { spawn } from 'child_process';\nimport { Promise } from 'bluebird';\nimport {\n    ALIASES_FILE,\n    INDEX_FILE\n} from '../config/files'\nimport {\n    ALIAS_PREFIX,\n    ALIAS_DELIMITER\n} from '../config/constants';\n\nlet fsOptions = { encoding: 'utf8' };\n\nlet resolveAliasedQuery = ( aliased ) => {\n    if ( aliased[ 0 ] !== ALIAS_PREFIX ) {\n        return Promise.resolve( aliased );\n    }\n\n    return new Promise( ( resolve, reject ) => {\n        void reject;\n\n        let search = aliased.substring( 1 );\n        let lines = byline( read( ALIASES_FILE, fsOptions ) );\n\n        lines.on( 'data', ( line ) => {\n            let tokens = line.split( ALIAS_DELIMITER );\n            let alias = tokens[ 0 ];\n            let query = tokens[ 1 ];\n\n            if ( search === alias ) { resolve( query ); }\n        });\n\n        lines.on( 'end', () => resolve( aliased ) );\n    } );\n};\n\nlet searchForQuery = ( query, inverted, notifyData, notifyEnd ) => {\n    let eGrepOptions = [ '-i' ];\n\n    if ( inverted ) {\n        eGrepOptions.push( '-v' );\n    }\n\n    eGrepOptions.push( query );\n\n    let child = spawn( 'cat', [ INDEX_FILE ] );\n    let filter = spawn( 'egrep', eGrepOptions );\n\n    let lines = createLineStream();\n\n    child.stdout.pipe( filter.stdin );\n    filter.stdout.pipe( lines );\n\n    lines.on( 'data', ( line ) => notifyData( line.toString() ) );\n    lines.on('end', () => notifyEnd() );\n\n    child.stdout.on( 'end', () => {\n\n        // Waits for buffer to flush before destroying the stream:\n        filter.stdin.end();\n    } );\n};\n\nlet find = ( query, inverted, notifyData, notifyEnd ) => {\n    resolveAliasedQuery( query ).then(\n        ( query ) => searchForQuery( query, inverted, notifyData, notifyEnd )\n    );\n};\n\nexport { find };\n\n"]}